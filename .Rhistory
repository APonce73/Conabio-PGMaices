shiny::runApp('Dropbox/GitHub/Conabio-PGMaices')
runApp('Dropbox/GitHub/Conabio-PGMaices')
runApp('Dropbox/GitHub/Conabio-PGMaices')
runApp('Dropbox/GitHub/Conabio-PGMaices')
runApp('Dropbox/GitHub/Conabio-PGMaices')
runApp('Dropbox/GitHub/Conabio-PGMaices')
runApp('Dropbox/GitHub/Conabio-PGMaices')
runApp('Dropbox/GitHub/Conabio-PGMaices')
runApp('Dropbox/GitHub/Conabio-PGMaices')
runApp('Dropbox/GitHub/Conabio-PGMaices')
runApp('Dropbox/GitHub/Conabio-PGMaices')
runApp('Dropbox/GitHub/Conabio-PGMaices')
runApp('Dropbox/GitHub/Conabio-PGMaices')
shiny::runApp('Dropbox/GitHub/Conabio-PGMaices')
runApp('Dropbox/GitHub/Conabio-PGMaices')
runApp('Dropbox/GitHub/Conabio-PGMaices')
library(gdistance)
install.packages("gdistance")
library(gdistance)
search()
set.seed(123)
r <- rasteer(ncol = 3, nrow = 3)
r <- raster(ncol = 3, nrow = 3)
r
r[] <- 1:ncell(r)
r
plot(r, main ="r", xlab = "Longitude (degrees)", ylab = "Latitude (degrees)")
r <- raster(ncol = 3, nrow = 13)
r
r[] <- 1:ncell(r)
r
plot(r, main ="r", xlab = "Longitude (degrees)", ylab = "Latitude (degrees)")
r <- raster(ncol = 3, nrow = 3)
r
r[] <- 1:ncell(r)
r
plot(r, main ="r", xlab = "Longitude (degrees)", ylab = "Latitude (degrees)")
text(r)
r[] <- 1
r
tr1 <- transition(r, transitionFunction = mean, directions = 8)
tr1
plot(tr1, main ="r", xlab = "Longitude (degrees)", ylab = "Latitude (degrees)")
r[] <- runif(9)
r
runif(9)
ncf <- function(x) max(x) - x[1] - x[2]
tr2 <- transition(r, ncf, 4, symm = FALSE)
ncf <- function(x) max(x) - x[1] + x[2]
tr2 <- transition(r, ncf, 4, symm = FALSE)
tr2
tr3 <- tr1 * tr2
tr3
tr3 <- tr1 + tr2
tr3
tr3 <- tr1 *3
tr3
tr1
tr2
tr3 <- tr1 * tr2
tr3
tr3 <- tr1 + tr2
tr3
tr3 <- tr1 *3
tr3
tr3 <- sqrt(tr1)
tr3
tr3[cbind(1:9, 1:9)] <- tr2[cbind(1:9, 1:9)]
tr3
tr3[1:9, 1:9] <- tr2[1:9, 1:9]
tr3[1:5, 1:5]
tr3
image(transitionMatrix(tr1))
image(transitionMatrix(tr2))
image(transitionMatrix(tr3))
image(transitionMatrix(tr1))
plot(tr3, main ="r", xlab = "Longitude (degrees)", ylab = "Latitude (degrees)")
plot(raster(tr3), main ="raster(tr3)", xlab = "Longitude (degrees)", ylab = "Latitude (degrees)")
plot(r, main ="r", xlab = "Longitude (degrees)", ylab = "Latitude (degrees)")
plot(raster(tr3), main ="raster(tr3)", xlab = "Longitude (degrees)", ylab = "Latitude (degrees)")
plot(r, main ="r", xlab = "Longitude (degrees)", ylab = "Latitude (degrees)")
tr1C <- geoCorrection(tr1, type = "c")
tr2C <- geoCorrection(tr2, type = "c")
r3
r3 <- raster(ncol=18, nrow=9)
r3
plot(r3, main ="r", xlab = "Longitude (degrees)", ylab = "Latitude (degrees)")
r3 <- setValues(r3, runif(18*9)+5)
r3
tr3 <- transition(r3, mean, 4)
tr3
tr3C <- geoCorrection(tr3, type="c", multpl=FALSE, scl=TRUE)
tr3R <- geoCorrection(tr3, type="r", multpl=FALSE, scl=TRUE)
tr3C
tr3R
CorrMatrix <- geoCorrection(tr3, type = "r", multpl = T, scl = T)
CorrMatrix
tr3R <- tr3 * CorrMatrix
tr3R
plot(raster(tr3), main ="raster(tr3)", xlab = "Longitude (degrees)", ylab = "Latitude (degrees)")
tr3 <- tr1 * tr2
tr3
tr3 <- tr1 + tr2
tr3
tr3 <- tr1 *3
tr3
tr3 <- sqrt(tr1)
tr3
tr3[cbind(1:9, 1:9)] <- tr2[cbind(1:9, 1:9)]
tr3[1:9, 1:9] <- tr2[1:9, 1:9]
tr3[1:5, 1:5]
image(transitionMatrix(tr1))
image(transitionMatrix(tr2))
image(transitionMatrix(tr3))
plot(r, main ="r", xlab = "Longitude (degrees)", ylab = "Latitude (degrees)")
plot(raster(tr3), main ="raster(tr3)", xlab = "Longitude (degrees)", ylab = "Latitude (degrees)")
tr1C <- geoCorrection(tr1, type = "c")
tr2C <- geoCorrection(tr2, type = "c")
r3 <- raster(ncol=18, nrow=9)
r3
r3 <- setValues(r3, runif(18*9)+5)
r3
tr3 <- transition(r3, mean, 4)
tr3
tr3C <- geoCorrection(tr3, type="c", multpl=FALSE, scl=TRUE)
tr3R <- geoCorrection(tr3, type="r", multpl=FALSE, scl=TRUE)
plot(raster(tr3), main ="raster(tr3)", xlab = "Longitude (degrees)", ylab = "Latitude (degrees)")
CorrMatrix <- geoCorrection(tr3, type = "r", multpl = T, scl = T)
tr3R <- tr3 * CorrMatrix
plot(raster(tr3R), main ="raster(tr3)", xlab = "Longitude (degrees)", ylab = "Latitude (degrees)")
plot(raster(tr3R), main ="raster(tr3)", xlab = "Longitude (degrees)", ylab = "Latitude (degrees)")
plot(raster(tr3C), main ="raster(tr3)", xlab = "Longitude (degrees)", ylab = "Latitude (degrees)")
sP <- cbind(c(-100, -100, 100), c(50, -50, 50))
sP
dist(sP)
costDistance(tr3C, sP)
costDistance(tr3R, sP)
rSPDistance(tr3R, sP, sP, theta=1e-12, totalNet = "total")
origin <- SpatialPoints(cbind(0,0))
origin
sP
rSPraster <- passage(tr3c, origin, sP[1,], theta = 3)
rSPraster <- passage(tr3C, origin, sP[1,], theta = 3)
plot(rSPraster)
plot(rSPraster, main ="rSPraster", xlab = "Longitude (degrees)", ylab = "Latitude (degrees)")
text(rSPraster)
plot(rSPraster, main ="rSPraster", xlab = "Longitude (degrees)", ylab = "Latitude (degrees)")
text(tr3C)
r1 <- passage(tr3C, origin, sp[1,], theta = 1)
r1 <- passage(tr3C, origin, sP[1,], theta = 1)
r2 <- passage(tr3C, origin, sP[2,], theta = 1)
plot(r1, main ="rSPraster", xlab = "Longitude (degrees)", ylab = "Latitude (degrees)")
plot(r2, main ="rSPraster", xlab = "Longitude (degrees)", ylab = "Latitude (degrees)")
rJoint <- min(r1, r2)
rJoint
plot(rJoint, main ="rSPraster", xlab = "Longitude (degrees)", ylab = "Latitude (degrees)")
rDiv <- max(max(r1,r2) * (1- min(r1,r2)) - min(r1,r2), 0)
rDiv
plot(rDiv, main ="rSPraster", xlab = "Longitude (degrees)", ylab = "Latitude (degrees)")
pathInc(tr3C, origin, sP)
6exp(-3.5)
6*exp(-3.5)
6*exp(-3.5 *abs(0.05))
6*exp(-3.5 *abs(0))
abs(0)
r <- raster(system.file("external/maungawhau.grd", package="gdistance"))
r
plot(r, main ="rSPraster", xlab = "Longitude (degrees)", ylab = "Latitude (degrees)")
image(transitionMatrix(tr1))
ncf <- function(x) max(x) - x[1] + x[2]
tr2 <- transition(r, ncf, 4, symm = FALSE)
tr2
plot(tr2)
altDiff <- function(x){x[2] - x[1]}
altDiff
hd <- transition(r, altDiff, 8, symm=FALSE)
slope <- geoCorrection(hd)
plot(slope)
slope
adj <- adjacent(r, cells=1:ncell(r), pairs=TRUE, directions=8)
adj
1:ncell(r)
adj
speed <- slope
speed[adj] <- 6 * exp(-3.5 * abs(slope[adj] + 0.05)) #Tobler's Hiking Function
speed
Conductance <- geoCorrection(speed)
Conductance
A <- c(2667670, 6479000)
B <- c(2667800, 6479400)
AtoB <- shortestPath(Conductance, A, B, output="SpatialLines")
BtoA <- shortestPath(Conductance, B, A, output="SpatialLines")
plot(r, xlab="x coordinate (m)", ylab="y coordinate (m)",
legend.lab="Altitude (masl)")
lines(AtoB, col="red", lwd=2)
lines(BtoA, col="blue")
text(A[1] - 10, A[2] - 10, "A")
text(B[1] + 10, B[2] + 10, "B")
AtoB
15*20
shiny::runApp('Dropbox/GitHub/ShinyMBellon')
shiny::runApp('Dropbox/GitHub/Conabio-PGMaices')
runApp('Dropbox/GitHub/Conabio-PGMaices')
runApp('Dropbox/GitHub/Conabio-PGMaices')
runApp('Dropbox/GitHub/Conabio-PGMaices')
runApp('Dropbox/GitHub/Conabio-PGMaices')
runApp('Dropbox/GitHub/Conabio-PGMaices')
runApp('Dropbox/GitHub/Conabio-PGMaices')
runApp('Dropbox/GitHub/Conabio-PGMaices')
runApp('Dropbox/GitHub/Conabio-PGMaices')
runApp('Dropbox/GitHub/Conabio-PGMaices')
runApp('Dropbox/GitHub/Conabio-PGMaices')
runApp('Dropbox/GitHub/Conabio-PGMaices')
filename <- normalizePath(file.path('./www',
paste(inorg, '.jpg', sep = '')))
filename <- normalizePath(file.path('./www',
paste("inorg", '.jpg', sep = '')))
filename
filename <- normalizePath(file.path('./www',
paste("inórg", '.jpg', sep = '')))
filename
filename <- normalizePath(file.path('./www',
paste("Cónico", '.jpg', sep = '')))
filename
runApp('Dropbox/GitHub/Conabio-PGMaices')
runApp('Dropbox/GitHub/Conabio-PGMaices')
runApp('Dropbox/GitHub/Conabio-PGMaices')
runApp('Dropbox/GitHub/Conabio-PGMaices')
runApp('Dropbox/GitHub/Conabio-PGMaices')
runApp('Dropbox/GitHub/Conabio-PGMaices')
runApp('Dropbox/GitHub/Conabio-PGMaices')
runApp('Dropbox/GitHub/Conabio-PGMaices')
runApp('Dropbox/GitHub/Conabio-PGMaices')
runApp('Dropbox/GitHub/Conabio-PGMaices')
runApp('Dropbox/GitHub/Conabio-PGMaices')
runApp('Dropbox/GitHub/Conabio-PGMaices')
runApp('Dropbox/GitHub/Conabio-PGMaices')
runApp('Dropbox/GitHub/Conabio-PGMaices')
runApp('Dropbox/GitHub/Conabio-PGMaices')
runApp('Dropbox/GitHub/Conabio-PGMaices')
runApp('Dropbox/GitHub/Conabio-PGMaices')
runApp('Dropbox/GitHub/Conabio-PGMaices')
runApp('Dropbox/GitHub/Conabio-PGMaices')
runApp('Dropbox/GitHub/Conabio-PGMaices')
runApp('Dropbox/GitHub/Conabio-PGMaices')
runApp('Dropbox/GitHub/Conabio-PGMaices')
runApp('Dropbox/GitHub/Conabio-PGMaices')
runApp('Dropbox/GitHub/Conabio-PGMaices')
runApp('Dropbox/GitHub/Conabio-PGMaices')
runApp('Dropbox/GitHub/Conabio-PGMaices')
library(shiny)
# Define UI for slider demo app ----
ui <- fluidPage(
# App title ----
titlePanel("Sliders"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar to demonstrate various slider options ----
sidebarPanel(
# Input: Simple integer interval ----
sliderInput("integer", "Integer:",
min = 0, max = 1000,
value = 500),
# Input: Decimal interval with step value ----
sliderInput("decimal", "Decimal:",
min = 0, max = 1,
value = 0.5, step = 0.1),
# Input: Specification of range within an interval ----
sliderInput("range", "Range:",
min = 1, max = 1000,
value = c(200,500)),
# Input: Custom currency format for with basic animation ----
sliderInput("format", "Custom Format:",
min = 0, max = 10000,
value = 0, step = 2500,
pre = "$", sep = ",",
animate = TRUE),
# Input: Animation with custom interval (in ms) ----
# to control speed, plus looping
sliderInput("animation", "Looping Animation:",
min = 1, max = 2000,
value = 1, step = 10,
animate =
animationOptions(interval = 300, loop = TRUE))
),
# Main panel for displaying outputs ----
mainPanel(
# Output: Table summarizing the values entered ----
tableOutput("values")
)
)
)
# Define server logic for slider examples ----
server <- function(input, output) {
# Reactive expression to create data frame of all input values ----
sliderValues <- reactive({
data.frame(
Name = c("Integer",
"Decimal",
"Range",
"Custom Format",
"Animation"),
Value = as.character(c(input$integer,
input$decimal,
paste(input$range, collapse = " "),
input$format,
input$animation)),
stringsAsFactors = FALSE)
})
# Show the values in an HTML table ----
output$values <- renderTable({
sliderValues()
})
}
# Create Shiny app ----
shinyApp(ui, server)
runApp('Dropbox/JANO/2018/Conabio/Cuernavaca/Example.R')
library(shiny)
# Define UI for slider demo app ----
ui <- fluidPage(
# App title ----
# App title ----
titlePanel("Ejemplo"),
h4("R-BioConductor-Developers-Workshop-2018"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar to demonstrate various slider options ----
sidebarPanel(
# Input: Simple integer interval ----
sliderInput("integer", "Integer:",
min = 0, max = 1000,
value = 500),
# Input: Decimal interval with step value ----
sliderInput("decimal", "Decimal:",
min = 0, max = 1,
value = 0.5, step = 0.1),
# Input: Specification of range within an interval ----
sliderInput("range", "Range:",
min = 1, max = 1000,
value = c(200,500)),
# Input: Custom currency format for with basic animation ----
sliderInput("format", "Custom Format:",
min = 0, max = 10000,
value = 0, step = 25,
pre = "$", sep = ",",
animate = TRUE),
# Input: Animation with custom interval (in ms) ----
# to control speed, plus looping
sliderInput("animation", "Looping Animation:",
min = 1, max = 200,
value = 1, step = 10,
animate =
animationOptions(interval = 100, loop = TRUE))
),
# Main panel for displaying outputs ----
mainPanel(
# Output: Table summarizing the values entered ----
tableOutput("values")
)
)
)
# Define server logic for slider examples ----
server <- function(input, output) {
# Reactive expression to create data frame of all input values ----
sliderValues <- reactive({
data.frame(
Name = c("Integer",
"Decimal",
"Range",
"Custom Format",
"Animation"),
Value = as.character(c(input$integer,
input$decimal,
paste(input$range, collapse = " "),
input$format,
input$animation)),
stringsAsFactors = FALSE)
})
# Show the values in an HTML table ----
output$values <- renderTable({
sliderValues()
})
}
# Create Shiny app ----
shinyApp(ui, server)
runApp('Dropbox/JANO/2018/Conabio/Cuernavaca/Example.R')
runApp('Dropbox/JANO/2018/Conabio/Cuernavaca/Example.R')
runApp('Dropbox/JANO/2018/Conabio/Cuernavaca/Example.R')
library(shiny); runApp('Dropbox/JANO/2018/Conabio/Cuernavaca/Example.R')
runApp('Dropbox/JANO/2018/Conabio/Cuernavaca/Example.R')
library(devtools)
devtools::install_github('thomasp85/gganimate')
library(ggplot2)
library(gganimate)
ggplot(mtcars, aes(factor(cyl), mpg)) +
geom_boxplot() +
# Here comes the gganimate code
transition_states(
gear,
transition_length = 2,
state_length = 1
) +
enter_fade() +
exit_shrink() +
ease_aes('sine-in-out')
ggplot(mtcars, aes(factor(cyl), mpg)) +
geom_boxplot() +
# Here comes the gganimate code
transition_states(
gear,
transition_length = 2,
state_length = 1
) +
enter_fade() +
exit_shrink() +
ease_aes('sine-in-out')
library(gapminder)
install.packages('gapminder')
library(gapminder)
ggplot(gapminder, aes(gdpPercap, lifeExp, size = pop, colour = country)) +
geom_point(alpha = 0.7, show.legend = FALSE) +
scale_colour_manual(values = country_colors) +
scale_size(range = c(2, 12)) +
scale_x_log10() +
facet_wrap(~continent) +
# Here comes the gganimate specific bits
labs(title = 'Year: {frame_time}', x = 'GDP per capita', y = 'life expectancy') +
transition_time(year) +
ease_aes('linear')
ggplot(gapminder, aes(gdpPercap, lifeExp, size = pop, colour = country)) +
geom_point(alpha = 0.7, show.legend = FALSE) +
scale_colour_manual(values = country_colors) +
scale_size(range = c(2, 12)) +
scale_x_log10() +
facet_wrap(~continent) +
# Here comes the gganimate specific bits
labs(title = 'Year: {frame_time}', x = 'GDP per capita', y = 'life expectancy') +
transition_time(year) +
ease_aes('linear')
ggplot(mtcars, aes(factor(cyl), mpg)) +
geom_boxplot() +
# Here comes the gganimate code
transition_states(
gear,
transition_length = 2,
state_length = 1
) +
enter_fade() +
exit_shrink() +
ease_aes('sine-in-out')
p <- ggplot(airquality, aes(Day, Temp)) +
geom_line(size = 2, colour = 'steelblue') +
transition_states(Month, 4, 1) +
shadow_mark(size = 1, colour = 'grey')
animate(p, renderer = ffmpeg_renderer())
p
p <- ggplot(airquality, aes(Day, Temp)) +
geom_line(size = 2, colour = 'steelblue') +
transition_states(Month, 1, 1) +
shadow_mark(size = 1, colour = 'grey')
p
ggplot(mtcars) +
geom_boxplot(aes(factor(cyl), mpg, frame = gear))
ggplot(mtcars) +
geom_boxplot(aes(factor(cyl), mpg)) +
transition_manual(gear)
ggplot(mtcars) +
geom_boxplot(aes(factor(cyl), mpg)) +
transition_frame(gear)
ggplot(mtcars) +
geom_boxplot(aes(factor(cyl), mpg)) +
transition_manual(gear)
shiny::runApp('Dropbox/GitHub/Conabio-PGMaices')
runApp('Dropbox/GitHub/Conabio-PGMaices')
runApp('Dropbox/GitHub/Conabio-PGMaices')
runApp('Dropbox/GitHub/Conabio-PGMaices')
library(devtools)
install_github("rstudio/shiny")
shiny::runApp('Dropbox/GitHub/Conabio-PGMaices')
runApp('Dropbox/GitHub/Conabio-PGMaices')
runApp('Dropbox/GitHub/Conabio-PGMaices')
shiny::runApp('Dropbox/GitHub/Conabio-PGMaices')
runApp('Dropbox/GitHub/Conabio-PGMaices')
runApp('Dropbox/GitHub/Conabio-PGMaices')
runApp('Dropbox/GitHub/Conabio-PGMaices')
runApp('Dropbox/GitHub/Conabio-PGMaices')
search()
shiny::runApp('Dropbox/GitHub/Conabio-PGMaices')
sessionInfo()
runApp('Dropbox/GitHub/Conabio-PGMaices')
install.packages("Rcpp")
install.packages("Rcpp")
shiny::runApp('Dropbox/GitHub/Conabio-PGMaices')
runApp('Dropbox/GitHub/Conabio-PGMaices')
library(dicromat)
library(scales)
install.packages("dicromat")
install.packages('dplyr',dependencies = TRUE)
install.packages("dplyr", dependencies = TRUE)
shiny::runApp('Dropbox/GitHub/Conabio-PGMaices')
runApp('Dropbox/GitHub/Conabio-PGMaices')
runApp('Dropbox/GitHub/Conabio-PGMaices')
library(devtools)
devtools::install_github("r-lib/scales")
shiny::runApp('Dropbox/GitHub/Conabio-PGMaices')
runApp('Dropbox/GitHub/Conabio-PGMaices')
runApp('Dropbox/GitHub/Conabio-PGMaices')
runApp('Dropbox/GitHub/Conabio-PGMaices')
runApp('Dropbox/GitHub/Conabio-PGMaices')
shiny::runApp('Dropbox/GitHub/Conabio-PGMaices')
runApp('Dropbox/GitHub/Conabio-PGMaices')
runApp('Dropbox/GitHub/Conabio-PGMaices')
